shinsplat_tensor_toys:
	7/8/2024
		See Tensor_Toys.txt for explanation.
shinsplat_clip_tokens_encode:
	7/8/2024
		Added a node that will take the output of _tokens and
		convert it into tensor blocks compatible with its associated
		intent, i.e. SD/T5.
		This also has a plugin for Tensor Toys.
shinsplat_text_to_tokens (SD/XL/SD3)
	7/8/2024
		There are two versions, the plain one works for SD and SDXL then
		there's the specific SD3 one as well, but the prior will work with
		SD3 but with fewer options.  Combined with "tokens_encode" this
		gives you token weight control.
shinsplat_lora_loader:
	6/20/2024
		When clip and model weight were zero I forgot to return
		expected values.  Fixed now.

shinsplat_clip_text_encode_T5:
	There's an SD3 version of this as well but I think I'll be working with this mostly
	because SD3 is probably not viable and I won't need to do anything more than testing
	and digging into the code and model, but anyway...

	6/20/2024
		Updated to change tokens_out to tokens_raw so that I can populate tokens_out
		with the actual token values and weights, where I've also updated the SD
		encoder to the same method.  These outputs are Python dictionary formatted
		strings that can be evaluated into a list of dictionaries containing 1
		token set per element.
	6/14/2024
		Updated so that the directives are not piped to the output "prompt_out".
shinsplat_variables:
	6/14/2024
		A basic variable implementation, add $VARIABLES
		to your text input and use a dictionary/JSON
		to describe the changes, "VARIABLES": "this stuff",
shinsplat_string_interpolated:
	6/14/2024
		The existing text nodes didn't fit my needs,
		I enabled dynamic prompts and added the END
		directive.
sinsplat_python:
	7/1/2024
		Added a check and warning, issuing a messag
		on first run, of the dangers easily exposed
		to a user from running an unknown work-flow.
		This stops the process on first run.
	6/9/2024
		Run python code from a text node
shinsplat_green_box
	7/21/2024
		Added a random feature to the list of items.  It will grab
		the entire list first, randomize the list, then iterate through
		that list in order to prevent unnecessary repeats per list.
	6/18/2024
		Added integer and float to outputs, useful when iterating
		through a list of desirable seeds, cfg, etc.
	6/16/2024
		I added the "END" directive, everything after this uppercase term is ignored.
	6/9/2024
		I expected to utilize comments in the prompts so people could
		make notes.  After testing multi-line elements, again, I ran
		into an issue, so instead of the more complex quoted prompts
		I've decided to just read lines, and ignore redundant line breaks.
		So your prompt iterations will be separated by the line ending \n
		so hitting the <enter> after a prompt, like you'll find in
		wildcard files, is the way to go.
	6/8/2024
		Added (I was probably going to put something here, I don't remember what it was)

shinsplat_clip_text_encode
	6/20/2024
		See T5.

	6/17/2024
		Updated to include the T5, 'END' directive is honored,
		blocks are no longer needed in t5 so, while the blocks are
		are still split in 'l', 'h' and 'g' the t5 block is just
		1 segment, as it apparently should be.

	6/16/2024
		Custom inputs were being passed to prompt_out, this is probably
		not an expected behavior and noodles can be piped into the areas
		needed instead of using this node as a gateway.  I removed flaw.

		"END" directive respected on all inputs separately.

		Output tokens now accurately representing inputs.

	6/6/2024
		The prompt_before wasn't working properly, should be fixed now.

	6/2/2024
		I added a couple of switches to improve my entertainment value,
		they shift the tensor weights and reverse them.  The results
		are not unpleasant.

		And on this same day I turned these switches into directives
		because I didn't like the clutter.

		CLIP_INVERT
		POOL_INVERT
		CLIP_SHIFT
		POOL_SHIFT

	6/1/2024
		updated to be compatible with Cascade

